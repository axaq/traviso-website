<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>TRAVISO Blog</title>
 <link href="http://thejqr.com/atom.xml" rel="self"/>
 <link href="http://thejqr.com/"/>
 <updated>2015-03-13T11:14:28+00:00</updated>
 <id>http://www.travisojs.com/</id>
 <author>
   <name>TRAVISO Blog</name>
   <email>karlidag@gmail.com</email>
 </author>

 
   <entry>
     <title>Selfless Ruby</title>
     <link href="http://travisojs.com/blog/2013/10/14/selfless-ruby.html"/>
     <updated>2013-10-14T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2013/10/14/selfless-ruby</id>
     <content type="html">&lt;p&gt;There are only a few occasions when you need to use self prefix in Ruby. Understanding these only takes a few minutes and can help you avoid some pretty common bugs and wasteful debugging attempts.&lt;/p&gt;
&lt;h3&gt;Avoiding local variable assignment&lt;/h3&gt;
&lt;p&gt;Calling a writer in the current scope, as in:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@verified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you didn&amp;#8217;t prefix self to that assignment, you would be making a new local variable and setting it to true. This variable has a lifetime of 1 statement, probably not what you were looking for and an easy bug to miss.&lt;/p&gt;
&lt;h3&gt;Side-stepping reserved words&lt;/h3&gt;
&lt;p&gt;Occasionally you need to call a method in the current scope that has the same name as a Ruby keyword. An instance wanting to introspect its its own class is a very common use.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Song&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_dupliactes&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case you are explicitly side-stepping the global behavior of the keyword. If you omit self, Ruby thinks you&amp;#8217;re about to define a new class, and is going to give you a syntax error.&lt;/p&gt;
&lt;h3&gt;Defining class methods&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;locate_by_zip_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# some fancy searching code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The use of self in this example tells Ruby that we&amp;#8217;re making methods on the Store class and not its instances.&lt;/p&gt;
&lt;h3&gt;That&amp;#8217;s it!&lt;/h3&gt;
&lt;p&gt;3 simple cases where you need to use self. All other uses are just being overly explicit.&lt;/p&gt;
&lt;h3&gt;Gotcha: Tricky sub-objects&lt;/h3&gt;
&lt;p&gt;Sub-objects only need to use the self prefix when you want to assign the whole object at a time. For example when initializing or setting an entire Hash, Array, or some other object.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re actually just manipulating the other object, you don&amp;#8217;t need to call self, because you&amp;#8217;re really calling two methods. In this case one is the reader, the other is the [] method on a Hash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# required, we want to call Server#options=&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toggle_warnings&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# not required, options[:warnings] is actually two method calls:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  * Server#options&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  * Hash#[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
   </entry>
 
   <entry>
     <title>Automatically Generated Maps with Microformats</title>
     <link href="http://travisojs.com/blog/2013/09/09/automatically-generated-maps-with-microformats.html"/>
     <updated>2013-09-09T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2013/09/09/automatically-generated-maps-with-microformats</id>
     <content type="html">&lt;p&gt;
  Got a few addresses and want to show them on a map without writing any javascript?
  It turns out, there&#39;s an incredibly easy way: mark up your addresses as
  &lt;a href=&quot;http://microformats.org/wiki/hcard&quot;&gt;hCards&lt;/a&gt; and use the
  &lt;a href=&quot;https://github.com/collectiveidea/simple-maps&quot;&gt;simple-maps&lt;/a&gt; javascript library.
&lt;/p&gt;

&lt;h3&gt;Microformats to the Rescue!&lt;/h3&gt;
&lt;p&gt;
  Microformats are a simple way to attach meaning to standard HTML tags by
  using classes. Here is an example I made with the
  &lt;a href=&quot;http://microformats.org/code/hcard/creator&quot;&gt;hCard Creator&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hcard-starbucks&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vcard&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;url fn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://starbucks.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Starbucks&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;adr&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;street-address&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;854 Broad Ripple Ave&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locality&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Indianapolis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;IN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;postal-code&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;46220&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;country-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;USA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
  Rendered as HTML using default styling, this looks like:
&lt;/p&gt;

&lt;p&gt;
  &lt;div id=&quot;hcard-starbucks&quot; class=&quot;vcard&quot;&gt;
    &lt;a class=&quot;url fn&quot; href=&quot;http://starbucks.com&quot;&gt;Starbucks&lt;/a&gt;
    &lt;div class=&quot;adr&quot;&gt;
      &lt;span class=&quot;street-address&quot;&gt;854 Broad Ripple Ave&lt;/span&gt;&lt;br/&gt;
      &lt;span class=&quot;locality&quot;&gt;Indianapolis&lt;/span&gt;,
      &lt;span class=&quot;region&quot;&gt;IN&lt;/span&gt;,
      &lt;span class=&quot;postal-code&quot;&gt;46220&lt;/span&gt;
      &lt;span class=&quot;country-name&quot;&gt;USA&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  Pretty simple, it usually means adding some classes to data that&#39;s
  already on the page. We can style this however we like, including
  completely hiding elements with &lt;code&gt;display: none&lt;/code&gt; for things
  that may be obvious (country name?).
&lt;/p&gt;

&lt;p&gt;
  To display the map we just use an element with id=&quot;map&quot;
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;map&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width: 100%; height: 400px&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div id=&quot;map&quot; style=&quot;width: 100%; height: 400px&quot;&gt;Map would be here if you had javascript enabled.&lt;/div&gt;

&lt;p&gt;
  There are two pins because it also picks up my hCard from the site layout.
&lt;/p&gt;

&lt;h3&gt;Automatic Geocoding&lt;/h3&gt;
&lt;p&gt;
  You may have noticed I didn&#39;t specify longitude or latitude anywhere
  in the hCard. simple-maps detects and computes geocodes when they&#39;re not given.
&lt;/p&gt;
</content>
   </entry>
 
   <entry>
     <title>Easy Heroku Deploys with Heroku San</title>
     <link href="http://travisojs.com/blog/2010/08/27/easy-heroku-deploys-with-heroku-san.html"/>
     <updated>2010-08-27T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2010/08/27/easy-heroku-deploys-with-heroku-san</id>
     <content type="html">&lt;p&gt;We deploy a great deal of our apps to &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, but maintaining multiple environments (staging, production, demo) was traditionally &lt;a href=&quot;/2009/04/25/deploying-multiple-environments-on-heroku.html&quot;&gt;very painful&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/fastestforward/heroku_san&quot;&gt;heroku_san&lt;/a&gt; is a simple set of rake tasks to make standard Rails deployment easy. Multiple apps, environments, branches and users are handled with the minimum of effort.&lt;/p&gt;
&lt;h3&gt;Initial Setup&lt;/h3&gt;
&lt;p&gt;I won&amp;#8217;t bore you with the details of &lt;a href=&quot;http://github.com/fastestforward/heroku_san/blob/master/README.rdoc&quot;&gt;installing the gem and including the rake tasks&lt;/a&gt;, but you need to know that heroku_san works by using a &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; file with shorthand versions of your Heroku application names. It looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# shorthand: heroku app&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;awesomeapp&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;awesomeapp-staging&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;awesomeapp-demo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;First Time&lt;/h3&gt;
&lt;p&gt;If this app has never been deployed to Heroku, you will need to create the remote applications. heroku_san can do this for you, using the data in config/heroku.yml.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake all heroku:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most multi-app deployments change the environment to something different for each app, allowing you to override things like S3 buckets, email policies, etc. heroku_san is happy to handle this too, it assumes you want the RACK_ENV set to the shorthand name of the application.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# set RACK_ENV on each application to the shorthand:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   awesomeapp-staging =&amp;gt; staging&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   awesomeapp-demo    =&amp;gt; demo&lt;/span&gt;
rake all heroku:rack_env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The old Heroku stack (aspen) requires you to use a Gem manifest (.gems) to list the gems your application depends on. heroku_san can auto-populate this using config.gem requirements for Rails 2 applications.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake heroku:gems&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Everyday Use&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake staging deploy            &lt;span class=&quot;c&quot;&gt;# deploy staging and migrate&lt;/span&gt;
rake production console        &lt;span class=&quot;c&quot;&gt;# open a console for production&lt;/span&gt;
rake demo staging heroku:share &lt;span class=&quot;c&quot;&gt;# add a new developer to demo and staging&lt;/span&gt;
rake all heroku:unshare        &lt;span class=&quot;c&quot;&gt;# remove a developer from all apps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Branches&lt;/h3&gt;
&lt;p&gt;Deploying always uses the current branch, so be careful! Occasionally you might need to force a deploy, especially if you&amp;#8217;re deploying multiple feature branches to the same app.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake staging deploy            &lt;span class=&quot;c&quot;&gt;# deploy current branch to staging&lt;/span&gt;
rake staging force_deploy      &lt;span class=&quot;c&quot;&gt;# force deploy current branch to staging&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Only One App?&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;re only using one app, you can skip the server names and just issue the commands directly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake deploy                    &lt;span class=&quot;c&quot;&gt;# deploy the only app you have configured&lt;/span&gt;
rake console                   &lt;span class=&quot;c&quot;&gt;# open a console on your single app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Curious?&lt;/h3&gt;
&lt;p&gt;heroku_san works entirely by using the git and heroku binaries. So if you&amp;#8217;re ever curious about how a command works or need to debug something you can just watch the screen as you run a command to see exactly what it&amp;#8217;s up to.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;rake staging deploy
&lt;span class=&quot;c&quot;&gt;# git push git@heroku.com:awesomeapp-staging.git  master:master &amp;amp;&amp;amp; \&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# heroku rake --app awesomeapp-staging db:migrate &amp;amp;&amp;amp; \&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# heroku restart --app awesomeapp-staging&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Even More!&lt;/h3&gt;
&lt;p&gt;A full list of commands heroku_san provides is available in the &lt;a href=&quot;http://github.com/fastestforward/heroku_san/blob/master/README.rdoc&quot;&gt;&lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Special Thanks&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://github.com/glennr&quot;&gt;Glenn Roberts&lt;/a&gt;, who was kind enough to convert heroku_san from a Rails plugin into a gem, making updates a breeze.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>iPhone Toggle Switches</title>
     <link href="http://travisojs.com/blog/2009/08/05/iphone-toggle-switches.html"/>
     <updated>2009-08-05T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2009/08/05/iphone-toggle-switches</id>
     <content type="html">&lt;p&gt;
  Way back in June, &lt;a href=&quot;http://awardwinningfjords.com/&quot;&gt;Thomas Reynolds&lt;/a&gt;
  released &lt;a
  href=&quot;http://awardwinningfjords.com/2009/06/16/iphone-style-checkboxes.html&quot;&gt;iPhone-style-checkboxes
  for jQuery&lt;/a&gt;, a progressive enhancement for checkboxes which makes them into
  the beautiful iPhone toggle switches. I really like these switches on the
  iPhone so I went about finishing up his version for the Prototype framework.
  Of course, I couldn&#39;t help but add some new features along the way!
&lt;/p&gt;

&lt;p class=&quot;rss_only&quot;&gt;
  &lt;strong&gt;
    You definitely need to &lt;a href=&quot;http://thejqr.com/2009/08/05/iphone-toggle-switches.html&quot;&gt;read
    this article on my site&lt;/a&gt; to see all the cool JavaScript effects I&#39;m
    talking about!
  &lt;/strong&gt;
&lt;/p&gt;

&lt;h3&gt;Variable sizes&lt;/h3&gt;

&lt;p&gt;
  The initial version supported changing the ON/OFF label text, but if you made
the text longer than a few characters, it would be hidden under the handle. I
set about making the handle and label sizes automatic based on the actual
label text, giving a really nice
&lt;a href=&quot;http://shop.o2.co.uk/new-iphone/index.html&quot;&gt;iphone 4&lt;/a&gt; look to the
handle and label.
&lt;/p&gt;

&lt;p&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;variable_size_male_female&quot;&gt;Sex&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;variable_size_male_female&quot;/&gt;&lt;/div&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;variable_size_a_b&quot;&gt;Path&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;variable_size_a_b&quot;/&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  As a bonus, you can also specify that no automatic resizing should be done and
  do the control and handle sizing with CSS to make a group of controls uniform.
&lt;/p&gt;

&lt;div style=&quot;width: 400px;&quot;&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;static_size_a&quot;&gt;Be you robot?&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;static_size_a&quot;/&gt;&lt;/div&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;static_size_b&quot;&gt;Comments&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;static_size_b&quot;/&gt;&lt;/div&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;static_size_c&quot;&gt;Option C&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;static_size_c&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;Draggable&lt;/h3&gt;

&lt;p&gt;
  They certainly looked like the iPhone switches, but they didn&#39;t feel like
  them. You could only click them to toggle, we needed to add support for
  dragging the control.
&lt;/p&gt;

&lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;variable_size_male_female&quot;&gt;Do it&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;draggable&quot; checked=&quot;checked&quot;/&gt;&lt;/div&gt;

&lt;h3&gt;Sliding labels&lt;/h3&gt;

&lt;p&gt;
  A quick check through the network graph revealed &lt;a
  href=&quot;http://github.com/mlangenberg&quot;&gt;Matthijs Langenberg&lt;/a&gt; had devised a
  clever way to slide the labels along with the handle. This was the final
  piece, now the our JavaScript was nearly indistinguishable from the native
  iPhone one.
&lt;/p&gt;

&lt;p&gt;
  &lt;div&gt;&lt;label class=&quot;left&quot; for=&quot;sliding_labels&quot;&gt;Go man go!&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;sliding_labels&quot; /&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3&gt;iPhone compatibility&lt;/h3&gt;

&lt;p&gt;
  Last but not least, our checkboxes didn&#39;t support dragging on the iPhone!
  Since the iPhone sends out touch events instead of mouse ones, all of our
  cool dragging code would need to be updated. As of today, both
  versions of this plugin now fully support the iPhone.
&lt;/p&gt;

&lt;h3&gt;Thanks&lt;/h3&gt;

&lt;p&gt;
  A huge thanks to Thomas Reynolds for his development on this awesome plugin
  and giving me the ability to add these improvements.
&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;
  The &lt;a href=&quot;http://github.com/tdreyno/iphone-style-checkboxes&quot;&gt;source code&lt;/a&gt; is available on GitHub
  or you can download a &lt;a href=&quot;http://github.com/tdreyno/iphone-style-checkboxes/zipball/master&quot;&gt;zip&lt;/a&gt; /
  &lt;a href=&quot;http://github.com/tdreyno/iphone-style-checkboxes/tarball/master&quot;&gt;tar.gz&lt;/a&gt;
  archive.
&lt;/p&gt;
</content>
   </entry>
 
   <entry>
     <title>Deploying Multiple Environments on Heroku</title>
     <link href="http://travisojs.com/blog/2009/04/25/deploying-multiple-environments-on-heroku.html"/>
     <updated>2009-04-25T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2009/04/25/deploying-multiple-environments-on-heroku</id>
     <content type="html">&lt;p class=&quot;update&quot;&gt;UPDATE: This post is outdated, check out &lt;a href=&quot;/2010/08/27/easy-heroku-deploys-with-heroku-san.html&quot;&gt;Easy Deploys with Heroku San&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So you followed yesterday&#39;s guide on &lt;a href=&quot;/2009/04/24/deploy-your-rails-application-in-2-minutes-with-heroku.html&quot;&gt;getting your application deployed to
Heroku&lt;/a&gt;, and now you&#39;ve fallen in love with it. Now you need to setup both a
production and staging environment that you can easily deploy your application
to.&lt;/p&gt;

&lt;p&gt;So far Heroku only runs code in one branch, so we&#39;ll work around this by
creating two remote repositories that we can push to.&lt;/p&gt;

&lt;p&gt;For example simplicity, we&#39;ll be pushing all code out of the same git
branch. You&#39;ll probably be pushing staging and production servers from different branches, adjust accordingly.&lt;/p&gt;

&lt;h3&gt;Create your servers and fix your remotes&lt;/h3&gt;

Application names have to be unique on Heroku, so make sure to replace myapp with your application&#39;s name. You can do that automatically by &lt;a href=&quot;#&quot; id=&quot;replace_application_name&quot;&gt;clicking here&lt;/a&gt;.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;heroku create myapp-staging --remote staging
heroku create myapp-production --remote production&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we&#39;ll be pushing to two applications we are using the --remote argument to make two sensibly named remotes.&lt;/p&gt;

&lt;h3&gt;Environment specific variables&lt;/h3&gt;

&lt;p&gt;Heroku has a nice interface for setting up application specific settings, but
I will assume your application configures itself according to the
RAILS_ENV variable. Check out &lt;a
href=&quot;http://docs.heroku.com/config-vars&quot;&gt;Heroku&#39;s docs&lt;/a&gt; if you need more
control.&lt;/p&gt;

&lt;p&gt;If you run your staging server in the production environment, you can skip this step.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;heroku config:add &lt;span class=&quot;nv&quot;&gt;RACK_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;staging --app myapp-staging
heroku config:add &lt;span class=&quot;nv&quot;&gt;RACK_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production --app myapp-production&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Deploy and migrate&lt;/h3&gt;

&lt;p&gt;You&#39;ll be doing this next command pretty often. We push the current branch to
the staging server&#39;s master branch. Since this is the first deploy we&#39;ll need to do the same thing for production and run all the migrations.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git push staging master
git push production master

heroku rake db:migrate --app myapp-staging
heroku rake db:migrate --app myapp-production

heroku open --app myapp-staging
heroku open --app myapp-production&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Done&lt;/h3&gt;

&lt;p&gt;Celebrate! You now have two servers running on Heroku with different databases and accessible through domains. Seriously, how long did that take?&lt;/p&gt;

&lt;h3&gt;Caveats&lt;/h3&gt;

&lt;p&gt;The heroku command seems to detect the application name by looking through
git&#39;s remotes for remotes that are located at heroku.com. This means it will
get confused by the multiple entries we created. You will need to work around
this by passing --app myapp-staging after the normal heroku command.&lt;/p&gt;

&lt;h3&gt;Troubleshooting&lt;/h3&gt;

&lt;p&gt;Make sure you followed my original guide on &lt;a
href=&quot;/2009/04/24/deploy-your-rails-application-in-2-minutes-with-heroku.html&quot;&gt;getting
your application deployed to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  document.observe(&#39;dom:loaded&#39;, function() {
    $(&#39;replace_application_name&#39;).observe(&#39;click&#39;, replaceApplicationName)
  });
  var old_name = &#39;myapp&#39;;
  function replaceApplicationName(event) {
    event.stop();
    var new_name = prompt(&#39;Enter your application name:&#39;);
    $$(&#39;pre&#39;).each(function(element) {
      element.update(element.innerHTML.replace(RegExp(old_name, &#39;g&#39;), new_name));
    });
    old_name = new_name;
  }
&lt;/script&gt;
</content>
   </entry>
 
   <entry>
     <title>Deploy Your Rails Application in 2 Minutes with Heroku</title>
     <link href="http://travisojs.com/blog/2009/04/24/deploy-your-rails-application-in-2-minutes-with-heroku.html"/>
     <updated>2009-04-24T00:00:00+01:00</updated>
     <id>http://travisojs.com/blog/2009/04/24/deploy-your-rails-application-in-2-minutes-with-heroku</id>
     <content type="html">&lt;p&gt;&lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt;, Instant Ruby Platform. We&#39;ve been using Heroku&#39;s free service for hosting staging servers for a few weeks now. It takes just a moment to setup and it couldn&#39;t be any easier to use.&lt;/p&gt;

&lt;p&gt;Today Heroku announced a &lt;a href=&quot;http://heroku.com/pricing&quot;&gt;pricing model&lt;/a&gt; and we should be using them for more than staging servers in the near future.&lt;/p&gt;

&lt;h3&gt;Start the clock&lt;/h3&gt;

&lt;p&gt;First timer? You&#39;ll need to do some minor setup. The middle command will ask you for your Heroku login/password and upload your SSH pubkey.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;sudo gem install heroku
heroku keys:add
heroku create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Heroku installs gem dependencies for your app when you do a git push, so it needs to have a .gems file in an easy to parse format.&lt;/p&gt;

&lt;p&gt;Run these commands to install a rake task for automatically generating a .gems file from your Rails gem dependencies. You&#39;ll need to rerun the rake task whenever you change your dependencies.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl http://gist.github.com/101101.txt &amp;gt; lib/tasks/heroku.rake
rake heroku:gems
git add lib/tasks/heroku.rake .gems
git commit lib/tasks/heroku.rake .gems -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Adding gem manifest for Heroku.&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we go, push your app, migrate the database and open it in a web browser! &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git push heroku master
heroku rake db:migrate
heroku open&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Done&lt;/h3&gt;
&lt;p&gt;Your application is up and running on Heroku&#39;s servers, 100% ready to use. Check out the next guide on setting up &lt;a href=&quot;/2009/04/25/deploying-multiple-environments-on-heroku.html&quot;&gt;multiple environments with Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Troubleshooting&lt;/h3&gt;

&lt;p&gt;If the application had any trouble starting try the commands below to get a better view.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;heroku logs     &lt;span class=&quot;c&quot;&gt;# view the application logs&lt;/span&gt;
heroku open     &lt;span class=&quot;c&quot;&gt;# some error messages show on the web&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
   </entry>
 
   <entry>
     <title>Use Instant Debugger on Rare Exceptions</title>
     <link href="http://travisojs.com/blog/2009/03/02/use-instant-debugger-on-rare-exceptions.html"/>
     <updated>2009-03-02T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/03/02/use-instant-debugger-on-rare-exceptions</id>
     <content type="html">&lt;p&gt;Most of the time a backtrace can help you zero in on a bug in your code quickly, but sometimes the issue is not your code but the data your code is processing. In these cases, a backtrace is just a clue to your problems, you really need to see what data your code was processing to get a feel for the issue.&lt;/p&gt;
&lt;p&gt;You could throw in some statements to print out certain variables to &amp;#8220;see&amp;#8221; what your code &amp;#8220;sees&amp;#8221; at that point in time, but there is a far easier way.&lt;/p&gt;
&lt;h3&gt;Your friend: debugger&lt;/h3&gt;
&lt;p&gt;The excellent ruby-debug gem lets you open up an instance of irb wherever you put a call to debugger. If you haven&amp;#8217;t already, check out the excellent &lt;a href=&quot;http://pivotallabs.com/users/chad/blog/articles/366-ruby-debug-in-30-seconds-we-don-t-need-no-stinkin-gui-&quot;&gt;30 second guide to ruby-debug&lt;/a&gt;. Just type in &amp;#8220;irb&amp;#8221; when the debugger triggers to get a live irb session with the current state.&lt;/p&gt;
&lt;p&gt;Normally this is more than enough to fix the problematic data/code. Today though I was iterating through a rather large set of data for importing from &lt;span class=&quot;caps&quot;&gt;CSV&lt;/span&gt;. The problem data was something like 5 minutes into the import. I needed to open the debugger at the instant of the problem data and not on the thousands of rows of good data that preceded it.&lt;/p&gt;
&lt;h3&gt;Start on a dime&lt;/h3&gt;
&lt;p&gt;A light when off in my head after a few minutes of stumbling around in console. Why not just wrap the offending bit of code in a rescue block and only open the debugger at that instant? I give you Instant Debug.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ruby-debug&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;debugger&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# no-op so the debugger can land in this context&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if this code fails for any reason, we can see the exact state of the application that caused this problem. We are able to reproduce the issue easily by calling Item.create!(row) and we can even modify row to see if we can fix bad data.&lt;/p&gt;
&lt;p&gt;A helpful hint: Because you want to be able to trigger the problem easily, you should wrap the rescue block as tightly around the problematic code as possible.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>ActiveRecord::Base#find_each Now in Rails</title>
     <link href="http://travisojs.com/blog/2009/02/23/active-record-each-now-in-edge-rails.html"/>
     <updated>2009-02-23T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/23/active-record-each-now-in-edge-rails</id>
     <content type="html">&lt;p&gt;&lt;strong&gt;Updated to reflect Rails 2.3 release implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you absolutely need to traverse a large number of objects in a table and have the ActiveRecord instance available, Rails now has a Model.find_each method that makes this safe and easy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:conditions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;last_login_at &amp;lt; ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This feature has been available for a while through the use of a few &lt;a href=&quot;http://github.com/guillermo/active_record_each&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;http://weblog.jamisbuck.org/2007/4/6/faking-cursors-in-activerecord&quot;&gt;snippets&lt;/a&gt; floating around, but as of Rails 2.3 ActiveRecord::Base#find_each is now in Rails core.&lt;/p&gt;
&lt;p&gt;All the implementations of this feature take roughly the same route. Grab a sizable amount of records, yield them individually and repeat. The key feature is only a small subset of all rows are instantiated at any time. This prevents your process from using far more memory than is available. Most implementations even force the ordering to the primary key to easily ensure all records are retrieved without repetition and an index is used.&lt;/p&gt;
&lt;p&gt;You can use any options a normal find call would take except for order or limit. Model.find_each then calls the find_in_batches. The new batch_size option defaults to 1000 objects. Higher number means less database calls, but also more memory.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Ruby's Rescue Statement Can Has Value?</title>
     <link href="http://travisojs.com/blog/2009/02/19/rubys-rescue-statement-can-has-value.html"/>
     <updated>2009-02-19T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/19/rubys-rescue-statement-can-has-value</id>
     <content type="html">&lt;p&gt;I just discovered something interesting about Ruby&amp;#8217;s exception rescuing. Check out these two example methods that differ only by exception assignment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return_nil_on_error&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return_exception_on_error&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_nil_on_error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;error!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_exception_on_error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;error!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the code above and this is what you will see.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&amp;lt;RuntimeError: error!&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;#8217;s interesting to see that Ruby treats the a rescue block as a value expression if it assigns the exception to a variable. Is there a valid use for this oddity?&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Passing Data With Ruby Exceptions</title>
     <link href="http://travisojs.com/blog/2009/02/11/passing-data-with-ruby-exceptions.html"/>
     <updated>2009-02-11T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/11/passing-data-with-ruby-exceptions</id>
     <content type="html">&lt;p&gt;Have you ever needed more than the exception class, error message and back-trace when handling an exception?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve run into this situation a few times, most recently while adding some automatic cache expiry to &lt;a href=&quot;http://github.com/jqr/stale_object_destroyer&quot;&gt;stale_object_destroyer&lt;/a&gt; when it rescues a ActiveRecord::StaleObjectError.&lt;/p&gt;
&lt;p&gt;First we subclass an exception and add an accessor for the data we&amp;#8217;d like to pass and add it to the initialize method for easy construction.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:object&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only other important bit is how you raise this new exception.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Too Lazy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;A realistic example&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:object&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_with_cache_update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CacheError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Object is Stale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stale?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stale?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Billy Mays&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_with_cache_update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CacheError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rescued &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; on user named &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expire_cache&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
   </entry>
 
   <entry>
     <title>TextMate, Rspec and Dot Spec Party</title>
     <link href="http://travisojs.com/blog/2009/02/06/textmate-rspec-and-dot-spec-party.html"/>
     <updated>2009-02-06T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/06/textmate-rspec-and-dot-spec-party</id>
     <content type="html">&lt;p&gt;I&amp;#8217;m going to show you how to get a great looking RSpec runner window and not go insane while trying to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/rspec_runner.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Beautiful passing green specs, easy to read failing red specs, a clickable backtrace and the failing spec block for good measure.&lt;/p&gt;
&lt;p&gt;Pretty sweet right? Let&amp;#8217;s get started.&lt;/p&gt;
&lt;h3&gt;Install RSpec bundle&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkdir -p ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/TextMate/Bundles/
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/TextMate/Bundles/
git clone git://github.com/dchelimsky/rspec-tmbundle.git RSpec.tmbundle
osascript -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;tell app &amp;quot;TextMate&amp;quot; to reload bundles&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;And now the fun begins&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;First you press Shift-Control-Option R (⇧⌃⌥R) to select the RSpec Bundle. This is so easy it only takes two hands.&lt;br /&gt;
    &lt;img src=&quot;/images/posts/shift_control_option_r.jpg&quot;&gt;&lt;/li&gt;
  &lt;li&gt;Now we need to press Command 3 (⌘3) to select the RSpec Bundle out of the list.&lt;br /&gt;
    &lt;img src=&quot;/images/posts/mode_select_r.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Command R (⌘R) to run the spec or Shift Command R (⇧⌘R) to run an individual spec.&lt;/li&gt;
  &lt;li&gt;Party time!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The party&amp;#8217;s over&lt;/h3&gt;
&lt;p&gt;The next time you open a spec or regular Ruby file you&amp;#8217;ll be started in the mode you last forced. That means you&amp;#8217;ll probably have to learn to do that tedious keyboard finger dance quite often.&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/audio-player.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;
  AudioPlayer.setup(&quot;/media/player.swf&quot;, {
    width: 290
  });
&lt;/script&gt;&lt;p class=&quot;audio&quot; id=&quot;obama_complicated&quot;&gt;[Audio] &amp;#8220;This shit&amp;#8217;s getting way too complicated for me.&amp;#8221; &amp;#8211; Barack Obama&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  AudioPlayer.embed(&quot;obama_complicated&quot;, {soundFile: &quot;/media/obama_complicated.mp3&quot;});
&lt;/script&gt;&lt;p&gt;We could switch the Ruby and RSpec shortcuts to a simpler keystroke, that would alleviate most of the problem. Except we would still need to press some keystroke to force the mode upon opening a new file.&lt;/p&gt;
&lt;p&gt;Running specs needs to be dead simple so people actually do it!&lt;/p&gt;
&lt;h3&gt;Dot spec has invited you to a party!&lt;/h3&gt;
&lt;p&gt;There&amp;#8217;s a far easier way to solve this problem. Just rename all your spec files to .spec and you will only have to tell TextMate one time to use RSpec mode and it will remember forever!&lt;/p&gt;
&lt;p&gt;The steps after switching to dot spec:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Command R (⌘R) to run the spec or Shift Command R (⇧⌘R) to run an individual spec.&lt;/li&gt;
  &lt;li&gt;Party Time!&lt;br /&gt;
    &lt;img src=&quot;http://www.scienceyear.com/parents/party_time/images/party_time_top.gif&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;You&amp;#8217;ve also been invited to a pre-party!&lt;/h3&gt;
&lt;p&gt;Who has time to rename all those files? Definitely not you!&lt;/p&gt;
&lt;p&gt;There is also a &lt;a href=&quot;http://github.com/jqr/thor_tasks/raw/master/rspec_rename_to_dotspec.thor&quot;&gt;fancy converter&lt;/a&gt; for renaming all of your old specs!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# in your project dir&lt;/span&gt;
gem install thor &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
thor install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
http://github.com/jqr/thor_tasks/raw/master/rspec_rename_to_dotspec.thor &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
thor rspec:rename_to_dotspec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
   </entry>
 
   <entry>
     <title>Basic Iso World</title>
     <link href="http://travisojs.com/blog/2009/02/03/global-git-ignore.html"/>
     <updated>2009-02-03T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/03/global-git-ignore</id>
     <content type="html">&lt;p&gt;Creating an isometric world with Traviso is pretty straightforward. Here is what u need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Visuals for tiles and objects.&lt;/li&gt;
  &lt;li&gt;An &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; file for Traviso to know what goes where.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Traviso is built on top of the pixi.js rendering engine. So if you haven&amp;#8217;t already check it out here.&lt;/p&gt;
&lt;h3&gt;Creating a tile image&lt;/h3&gt;
&lt;p&gt;Isometric tiles are defined by two parameters throughout Traviso:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Iso-Angle:&lt;/b&gt; The height of a single tile.&lt;br /&gt;
  	&lt;img src=&quot;/images/posts/shift_control_option_r.jpg&quot;&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Iso-Height:&lt;/b&gt; The angle between the isometric edge and the isometric (horizontal) diagnal of the tile.&lt;br /&gt;
  	&lt;img src=&quot;/images/posts/shift_control_option_r.jpg&quot;&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Default value for the Iso-Angle is 30 degrees and default height is &amp;#8230;..&lt;/p&gt;
&lt;p&gt;Git supports global ignores just like any good &lt;span class=&quot;caps&quot;&gt;SCM&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global core.excludesfile ~/.gitignore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.DS_Store\nThumbs.db\n&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For good measure I threw in Windows&amp;#8217; creepy file &lt;a href=&quot;http://en.wikipedia.org/wiki/Thumbs.db&quot;&gt;Thumbs.db&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sadly this won&amp;#8217;t stop other developers from accidentally committing those files, so you still need to add those ignores to your .gitignore in every project. I&amp;#8217;ve setup my &lt;a href=&quot;http://github.com/jqr/dotfiles/raw/master/bash_profile.d/git.sh&quot;&gt;git init alias&lt;/a&gt; to do this for me.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>The Making of typed_serialize</title>
     <link href="http://travisojs.com/blog/2009/02/01/the-making-of-typed-serialize.html"/>
     <updated>2009-02-01T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/01/the-making-of-typed-serialize</id>
     <content type="html">&lt;p&gt;My &lt;a href=&quot;http://github.com/jqr/typed_serialize&quot;&gt;typed_serialize plugin&lt;/a&gt; came from the repetition of code just like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It calls super to peek at what ActiveRecord would return for the serialized column. If it&amp;#8217;s a Hash, we just return it right away. If it&amp;#8217;s anything else we set it to a new Hash and return that.&lt;/p&gt;
&lt;h3&gt;Distilling the interface&lt;/h3&gt;
&lt;p&gt;After thinking about the pattern for a bit, I decided that simplest shorthand would be this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typed_serialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code says &amp;#8220;there is a typed and serialized attribute named options, that will always be a Hash.&amp;#8221; Notice that it is nearly the same usage as the original serialize method.&lt;/p&gt;
&lt;h3&gt;Get to it&lt;/h3&gt;
&lt;p&gt;First off, we define a method that is accessible at the time of class definition. Since the usage is the same as serialize, we can use the original serialize method definition as a starting point.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typed_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On second thought, what&amp;#8217;s the point of class_name being optional? It made sense for the original serialize method, but not typed_serialize. Let&amp;#8217;s make class_name mandatory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typed_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK, now our User model can properly execute, but it does absolutely nothing. So let&amp;#8217;s at least call Rails&amp;#8217; serialize method to get the standard behavior.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typed_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Adding the meat&lt;/h3&gt;
&lt;p&gt;Our repeated code revolved around a custom reader for a serialized attribute. So let&amp;#8217;s add a custom reader for attr_name using define_method and our original repeated code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typed_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The original code has a couple of small problems when inserted into this context. It assumes the value should always be a Hash and written attribute is always named options.&lt;/p&gt;
&lt;p&gt;A quick look at serialize&amp;#8217;s implementation tells us it stores its data in a hash with the key as the attribute name in string form, and the value is the class_name. We&amp;#8217;ll use that to derive the expected class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expected_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialized_attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;#8217;ll use Ruby&amp;#8217;s send method to call a method with a name we won&amp;#8217;t know until runtime.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;All together now.&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;typed_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expected_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialized_attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is my first post detailing an implementation. Interestingly enough, it alerted me to a few unnecessarily complex portions of even this tiny amount of code.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>Making Rails' Serialize Even Better</title>
     <link href="http://travisojs.com/blog/2009/02/01/making-rails-serialize-even-better.html"/>
     <updated>2009-02-01T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/02/01/making-rails-serialize-even-better</id>
     <content type="html">&lt;p&gt;Rails has this handy method that allows you store almost any object in the database with ease. Most often I end up using it for storing optional attributes in a hash.&lt;/p&gt;
&lt;p&gt;Here is the proper syntax for telling Rails that there is an options attribute that should only store Hash values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;The options attribute will start off as nil, and remain nil until you set it to something else. Setting the class_name to Hash only affects what you can write to this attribute.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;=&amp;gt; #&amp;lt;User id: nil, name: nil, options: nil&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:theme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;NoMethodError: You have a nil object when you didn&amp;#39;t expect it!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;You might have expected an instance of ActiveRecord::Base.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;The error occurred while evaluating nil.[]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;	from (irb):2&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;=&amp;gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;What we really need is to automatically return an empty Hash on this new object so we can go on our merry way.&lt;/p&gt;
&lt;p&gt;Add this to your environment.rb.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jqr-typed_serialize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;typed_serialize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://gems.github.com&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now run this command to install the gem.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake gems:install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick change of our model will fix all of our woes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;typed_serialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;=&amp;gt; #&amp;lt;User id: nil, name: nil, options: nil&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:theme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;=&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;=&amp;gt; {}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voila!&lt;/p&gt;
&lt;h3&gt;The how and why&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;re curious about how this works, I&amp;#8217;ve written a simple post describing the &lt;a href=&quot;/blog/2009/02/01/the-making-of-typed-serialize.html&quot;&gt;the making of typed_serialize&lt;/a&gt;, or you can &lt;a href=&quot;http://github.com/jqr/typed_serialize&quot;&gt;browse the code&lt;/a&gt;.&lt;/p&gt;</content>
   </entry>
 
   <entry>
     <title>All My Code Are Belong to Us</title>
     <link href="http://travisojs.com/blog/2009/01/31/all-my-code-are-belong-to-us.html"/>
     <updated>2009-01-31T00:00:00+00:00</updated>
     <id>http://travisojs.com/blog/2009/01/31/all-my-code-are-belong-to-us</id>
     <content type="html">&lt;p&gt;I&amp;#8217;ve really been pushing myself to move as much code as possible into the public space. &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; has come at a perfect time to encourage this behavior. It makes the tedious process of sharing code so easy you&amp;#8217;d be stupid not to.&lt;/p&gt;
&lt;p&gt;I put all of it &lt;a href=&quot;http://github.com/jqr&quot;&gt;directly on GitHub&lt;/a&gt; as a Rails plugin and a Ruby gem. Learning how to do this is a few hours of investment, but it&amp;#8217;s an investment you only need to make once. I&amp;#8217;m using &lt;a href=&quot;http://blog.evanweaver.com/files/doc/fauna/echoe/files/README.html&quot;&gt;Echoe&lt;/a&gt; right now, but I&amp;#8217;ll probably switch to &lt;a href=&quot;http://technicalpickles.com/posts/craft-the-perfect-gem-with-jeweler&quot;&gt;Jeweler&lt;/a&gt; for even simpler releases.&lt;/p&gt;
&lt;p&gt;I am certain that making code reusable is one of the best ways to gain a solid understanding of how a software developer&amp;#8217;s tools should be used. Polishing up code for public release encourages a ton of good behavior that makes even personal reuse easier and as a side benefit, other people will improve my code for free!&lt;/p&gt;
&lt;p&gt;Most of the plugins and gems I write are simple enhancements to patterns and are the result of DRYing up code in a single project. After abstracting the initial idea from one project, I find it&amp;#8217;s much easier to recognize the same pattern in other projects.&lt;/p&gt;
&lt;p&gt;So take a few minutes and look for patterns in your code. Give the pattern a name. Uncover the simplest way to express it. Start using it. Discover it&amp;#8217;s limitations. Publish it. Talk about it.&lt;/p&gt;</content>
   </entry>
 

</feed>
